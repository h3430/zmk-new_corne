#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include <input/processors.dtsi>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <30>;
    };

    macros {
        getmeback: getmeback {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <60>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LALT>
                , <&macro_tap &kp F5>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp LCTRL>
                ;
        };
        backtab: backtab {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <60>;
            bindings
                = <&macro_press &kp LWIN>
                , <&macro_tap &kp A>
                , <&macro_release &kp LWIN>
                ;
        };
        forwardtab: forwardtab {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <60>;
            bindings
                = <&macro_press &kp LWIN>
                , <&macro_tap &kp D>
                , <&macro_release &kp LWIN>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "<2";
            bindings = <
&kp TAB    &kp Q  &kp W      &kp E     &kp R  &kp T                              &kp UP                &kp Y        &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LSHFT  &kp A  &kp S      &kp D     &kp F  &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X      &kp C     &kp V  &kp B       &kp C_PP               &kp DOWN              &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &to 3
                             &kp LALT  &mo 1  &kp SPACE                                                &kp BSPC     &kp LSHIFT  &kp RET
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "<3";
            bindings = <
&kp ESCAPE  &kp N1           &kp N2          &kp N3        &kp N4           &kp N5                                   &mmv MOVE_UP                         &kp N6         &kp N7      &kp N8                &kp N9                 &kp N0         &kp TAB
&kp LSHIFT  &mo 2            &kp LC(T)       &kp LC(L)     &kp PRINTSCREEN  &kp C_NEXT             &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT        &kp EQUAL      &kp PLUS    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH  &kp GRAVE
&kp LCTRL   &rgb_ug RGB_OFF  &kp LC(W)       &kp LC(C)     &kp LC(V)        &kp C_PREVIOUS    &trans                 &mmv MOVE_DOWN                    &kp UNDER      &kp MINUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE       &kp PG_DN
                                             &kp LEFT_ALT  &trans           &kp SPACE                                                                     &kp BSPC     &kp LSHIFT  &kp RET
            >;
            sensor-bindings = <&scroll_encoder>;
        };



        raise_layer {
            display-name = ":>";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH       &kp DLLR        &kp PRCNT                           &bt BT_NXT                    &kp CARET  &kp AMPS  &kp ASTRK     &kp LPAR   &kp RPAR  &kp BSPC
&trans  &none         &kp LC(S)     &kp LC(PG_UP)  &kp LC(PG_DN)   &none                 &bt BT_SEL 0  &bt BT_CLR  &bt BT_SEL 1         &kp LEFT   &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &getmeback    &none          &to 3           &mkp MB5  &trans                    &bt BT_PRV                  &kp UNDER  &kp PLUS  &kp LBRC      &kp RBRC   &kp PIPE  &kp TILDE
                                    &trans         &trans          &kp SPACE                                                           &kp BSPC     &kp LSHIFT  &kp RET
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "555";
            bindings = <
&kp TAB    &kp Q  &kp W      &kp E     &kp R  &kp T                              &kp UP                &kp Y        &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LSHFT  &kp A  &kp S      &kp D     &kp F  &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X      &kp C     &kp V  &kp B       &to 0               &kp DOWN              &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &to 0
                             &kp LALT  &kp SPACE  &kp SEMI                                                &kp BSPC     &kp LSHIFT  &kp RET
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };
};
